using System;
using System.IO;
using Mono.Options;

namespace BehaveN.Tool
{
    [Summary("Generates test fixtures for the scenarios contained in text files")]
    public class GenerateCommand : ICommand
    {
        public static void WriteHelp()
        {
            Console.WriteLine("usage: BehaveN.Tool Generate [OPTION]... <filepattern>...");
            Console.WriteLine();
            Console.WriteLine("<filepattern> can be the path to any file. Wildcards don't work yet.");
            Console.WriteLine("All files are considered to be text files containing scenarios. A .g.cs");
            Console.WriteLine("file will be generated next to each text file containing the test");
            Console.WriteLine("fixtures.");
            Console.WriteLine();
            Console.WriteLine("NOTE: You need to specify at least one text file!");
            Console.WriteLine();
            Console.WriteLine("options:");
            Console.WriteLine();
            GetOptions().WriteOptionDescriptions(Console.Out);
        }

        static string ns = "MyNamespace";
        static string baseClass = null;
        static bool noSetUp = false;
        static bool noTearDown = false;

        public int Run(string[] args)
        {
            OptionSet options = GetOptions();

            var files = options.Parse(args);

            if (files.Count < 1)
                return -1;

            foreach (var file in files)
            {
                var ff = new FeatureFile();
                ff.LoadFile(file);

                string className = Path.GetFileNameWithoutExtension(file);
                string csFile = Path.ChangeExtension(file, ".g.cs");

                Console.WriteLine("Writing to " + csFile);

                StringWriter sw = new StringWriter();

                sw.WriteLine("// This code was generated by the BehaveN tool.");
                sw.WriteLine();

                sw.WriteLine("using BehaveN;");
                sw.WriteLine("using NUnit.Framework;");
                sw.WriteLine();
                sw.WriteLine("namespace {0}", ns);
                sw.WriteLine("{");

                sw.WriteLine("    [TestFixture]");
                sw.WriteLine("    public partial class {0}{1}", className, (baseClass != null) ? " : " + baseClass : "");
                sw.WriteLine("    {");

                sw.WriteLine(@"        private FeatureFile ff = new FeatureFile();");

                if (!noSetUp)
                {
                    sw.WriteLine(@"
        [TestFixtureSetUp]
        public void LoadScenarios()
        {{
            ff.StepDefinitions.UseStepDefinitionsFromAssembly(GetType().Assembly);
            ff.LoadEmbeddedResource(GetType().Assembly, ""{0}"");
        }}", Path.GetFileName(file));
                }

                if (!noTearDown)
                {
                    sw.WriteLine(@"
        [TestFixtureTearDown]
        public void ReportUndefinedSteps()
        {
            ff.ReportUndefinedSteps();
        }");
                }

                foreach (var scenario in ff.Scenarios)
                {
                    sw.WriteLine();

                    sw.WriteLine("        [Test]");
                    sw.WriteLine("        public void {0}()", scenario.Name.Replace(" ", "_"));
                    sw.WriteLine("        {");
                    sw.WriteLine("            ff.Scenarios[\"{0}\"].Verify();", scenario.Name);
                    sw.WriteLine("        }");
                }

                sw.WriteLine("    }");

                sw.WriteLine("}");

                string oldText = "";

                if (File.Exists(csFile))
                {
                    oldText = File.ReadAllText(csFile);
                }

                string newText = sw.GetStringBuilder().ToString();

                if (oldText != newText)
                {
                    File.WriteAllText(csFile, newText);
                }
            }

            return 0;
        }

        private static OptionSet GetOptions()
        {
            var options = new OptionSet();
            options.Add("namespace=", "the namespace for the generated classes", s => ns = s);
            options.Add("base-class=", "the base class for the generated classes", s => baseClass = s);
            options.Add("no-setup", "do not generate a test fixture set up method", s => noSetUp = true);
            options.Add("no-teardown", "do not generate a test fixture tear down method", s => noTearDown = true);
            return options;
        }
    }
}
